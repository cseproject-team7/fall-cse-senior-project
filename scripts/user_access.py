import requests
import json
import time
import os

# -----------------------------
# Configuration
# -----------------------------
# We only need the tenant ID here as the user's credentials are used for auth.
CREATOR_APP = {
    "tenant_id": "tenant_id" 
}

# The file generated by assign_apps.py
INPUT_FILE = "assignments.json"

# A delay to ensure sign-in logs are generated as distinct events
DELAY_BETWEEN_SIGNINS_SECONDS = 15

# -----------------------------
# Main Simulation Logic
# -----------------------------
def simulate_all_signins():
    """Reads app assignments from a JSON file and simulates a sign-in for each."""
    print("\n--- Starting Sign-in Simulation Process ---")
    
    try:
        with open(INPUT_FILE, 'r') as f:
            assignments = json.load(f)
        print(f"Successfully read {len(assignments)} assignment(s) from {INPUT_FILE}")
    except FileNotFoundError:
        print(f"[ERROR] Input file not found: {INPUT_FILE}. Please run assign_apps.py first.")
        return
    except json.JSONDecodeError:
        print(f"[ERROR] Could not decode JSON from {INPUT_FILE}. The file may be empty or corrupted.")
        return

    for i, assignment in enumerate(assignments):
        username = assignment["userPrincipalName"]
        password = assignment["password"]
        app_name = assignment["appName"]
        client_id = assignment["appClientId"]
        client_secret = assignment["appClientSecret"]

        print(f"\n--- Simulating sign-in for {username} to '{app_name}' ---")
        
        url = f"https://login.microsoftonline.com/{CREATOR_APP['tenant_id']}/oauth2/v2.0/token"
        payload = {
            "grant_type": "password",
            "client_id": client_id,
            "client_secret": client_secret,
            "scope": "https://graph.microsoft.com/User.Read",
            "userName": username,
            "password": password
        }
        response = requests.post(url, data=payload)
        
        if response.status_code == 200:
            print("Sign-in simulation successful.")
        else:
            print(f"[ERROR] Sign-in simulation failed. Status: {response.status_code}, Response: {response.text}")

        # Wait before the next simulation to ensure logs are processed distinctly
        if i < len(assignments) - 1: # Don't wait after the last one
             print(f"Waiting for {DELAY_BETWEEN_SIGNINS_SECONDS} seconds...")
             time.sleep(DELAY_BETWEEN_SIGNINS_SECONDS)
            
    print("\n--- Simulation Process Complete ---")

# -----------------------------
# Main Execution
# -----------------------------
if __name__ == "__main__":
    simulate_all_signins()

